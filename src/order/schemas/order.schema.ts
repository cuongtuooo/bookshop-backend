import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import mongoose, { HydratedDocument } from 'mongoose';
import { Book } from 'src/book/schemas/book.schemas';

export type OrderDocument = HydratedDocument<Order>;

@Schema({ timestamps: true })
export class Order {
    @Prop()
    name: string;

    @Prop()
    address: string;

    @Prop()
    phone: string;

    @Prop()
    type: string; // COD, BANKING, v.v.

    @Prop()
    paymentStatus: string;

    @Prop()
    paymentRef: string;

    @Prop({
        type: [
            {
                _id: { type: mongoose.Schema.Types.ObjectId, ref: Book.name, required: true },
                quantity: { type: Number, required: true },
                bookName: { type: String, required: true },
            },
        ],
    })
    detail: {
        _id: mongoose.Types.ObjectId;
        quantity: number;
        bookName: string;
    }[];

    @Prop()
    totalPrice: number;

    /** üÜï Tr·∫°ng th√°i ƒë∆°n h√†ng */
    @Prop({
        type: String,
        enum: [
            'Ch·ªù x√°c nh·∫≠n',      // user v·ª´a ƒë·∫∑t
            'ƒêang giao h√†ng',    // admin nh·∫•n ‚ÄúGiao h√†ng‚Äù
            'ƒê√£ giao h√†ng',      // admin x√°c nh·∫≠n giao xong
            'ƒê√£ nh·∫≠n h√†ng',      // user x√°c nh·∫≠n ƒë√£ nh·∫≠n
            'Ho√†n h√†ng',         // user b√°o ho√†n
            'ƒê√£ nh·∫≠n h√†ng ho√†n', // admin x√°c nh·∫≠n ho√†n th√†nh ho√†n
            'ƒê√£ h·ªßy ƒë∆°n',        // user h·ªßy
        ],
        default: 'Ch·ªù x√°c nh·∫≠n',
    })
    status: string;

    /** Ng∆∞·ªùi t·∫°o ƒë∆°n */
    @Prop({
        type: {
            _id: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
            email: String,
        },
    })
    createdBy: {
        _id: mongoose.Types.ObjectId;
        email: string;
    };

    /** Ng∆∞·ªùi c·∫≠p nh·∫≠t ƒë∆°n */
    @Prop({
        type: {
            _id: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
            email: String,
        },
    })
    updatedBy: {
        _id: mongoose.Types.ObjectId;
        email: string;
    };

    /** Ng∆∞·ªùi x√≥a ƒë∆°n */
    @Prop({
        type: {
            _id: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
            email: String,
        },
    })
    deletedBy: {
        _id: mongoose.Types.ObjectId;
        email: string;
    };

    @Prop()
    createdAt: Date;

    @Prop()
    updatedAt: Date;

    @Prop()
    isDeleted: Date;

    @Prop()
    deletedAt: Date;
}

export const OrderSchema = SchemaFactory.createForClass(Order);
